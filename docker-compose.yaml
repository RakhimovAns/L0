version: '3.8'

services:
  app:
    build: .
    ports:
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    command: ["./bin/app"]
    environment:
      KAFKA_BROKERS: "kafka:9092"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: wb
      DB_USER: postgres
      DB_PASSWORD: postgres

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wb
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data

  migrator:
    build: .
    command: ["./bin/migrator"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: wb
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_SSLMODE: disable

  redis:
    image: redis:7.2
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/redis

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "orders:1:1"

volumes:
  pg_data:
  redis_data: